{"slots":{"0":{"name":"emitter","type":{"methods":[],"events":[]}},"1":{"name":"receiver","type":{"methods":[],"events":[]}},"2":{"name":"muDb","type":{"methods":[],"events":[]},"class":"DataBankUnit"},"3":{"name":"waypointDb","type":{"methods":[],"events":[]},"class":"DataBankUnit"},"4":{"name":"slot4","type":{"methods":[],"events":[]}},"5":{"name":"slot5","type":{"methods":[],"events":[]}},"6":{"name":"slot6","type":{"methods":[],"events":[]}},"7":{"name":"slot7","type":{"methods":[],"events":[]}},"8":{"name":"slot8","type":{"methods":[],"events":[]}},"9":{"name":"slot9","type":{"methods":[],"events":[]}},"10":{"name":"slot10","type":{"methods":[],"events":[]}},"11":{"name":"slot11","type":{"methods":[],"events":[]}},"12":{"name":"slot12","type":{"methods":[],"events":[]}},"13":{"name":"slot13","type":{"methods":[],"events":[]}},"14":{"name":"slot14","type":{"methods":[],"events":[]}},"15":{"name":"slot15","type":{"methods":[],"events":[]}},"16":{"name":"slot16","type":{"methods":[],"events":[]}},"17":{"name":"slot17","type":{"methods":[],"events":[]}},"18":{"name":"slot18","type":{"methods":[],"events":[]}},"19":{"name":"slot19","type":{"methods":[],"events":[]}},"20":{"name":"slot20","type":{"methods":[],"events":[]}},"-5":{"name":"library","type":{"methods":[],"events":[]}},"-4":{"name":"system","type":{"methods":[],"events":[]}},"-3":{"name":"player","type":{"methods":[],"events":[]}},"-2":{"name":"construct","type":{"methods":[],"events":[]}},"-1":{"name":"unit","type":{"methods":[],"events":[]}}},"handlers":[{"key":60,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"function library.addEventHandlers(a)if not a or a.onEvent and a.triggerEvent then return false end;if'table'~=type(a)then error('You can only add event handlers to table objects!')end;local b=0;local c={}a.onEvent=function(self,d,e,f)if'function'~=type(e)then error('Event handler must be a function!')end;f=f or self;if'table'~=type(f)then error('The value of self must be a table!')end;if not c[d]then c[d]={}end;b=b+1;c[d][b]={e,f}return b end;a.clearEvent=function(self,d,g)if c[d]and c[d][g]then c[d][g]=nil end end;a.triggerEvent=function(self,d,...)for h,e in pairs(c[d]or{})do e[1](e[2],...)end end;return true end\nlocal a=DULibrary;function a.getLinks(b,c)local d={}if not b then b={}end;local e=0;for f,g in pairs(unit)do if'table'==type(g)and'function'==type(g.getClass)then local h=true;for i,j in pairs(b)do if not('function'==type(g[i])and j==g[i]():sub(1,#j))then h=false end end;if h then e=e+1;if c then f=e end;d[f]=g end end end;return d end;function a.getLinksByClass(k,c)return a.getLinks({getClass=k},c)end;function a.getLinkByClass(k)return a.getLinksByClass(k,true)[1]end;function a.getCoreUnit()return a.getLinkByClass('CoreUnit')end;function a.getLinkByName(l)local m=a.getCoreUnit()if not m then error('getLinkByName requires a linked CoreUnit to work')end;local d=a.getLinks()for n,g in pairs(d)do if l==m.getElementNameById(g.getLocalId())then return g end end end\n"},{"key":61,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/utils/du_constants'] = (function (...) ---@class UnitEvents\nUNIT_EVENTS = {}\nUNIT_EVENTS.START = 'onStart'\nUNIT_EVENTS.STOP = 'onStop'\n\n---@class SystemEvents\nSYSTEM_EVENTS = {}\nSYSTEM_EVENTS.ACTION_LOOP = 'onActionLoop'\nSYSTEM_EVENTS.ACTION_START = 'onActionStart'\nSYSTEM_EVENTS.ACTION_STOP = 'onActionStop'\nSYSTEM_EVENTS.INPUT_TEXT = 'onInputText'\nSYSTEM_EVENTS.UPDATE = 'onUpdate'\n\n---@class LuaActions\nLUA_ACTIONS = {}\nLUA_ACTIONS.FORWARD = \"forward\"\nLUA_ACTIONS.BACKWARD = \"backward\"\nLUA_ACTIONS.YAWLEFT = \"yawleft\"\nLUA_ACTIONS.YAWRIGHT = \"yawright\"\nLUA_ACTIONS.STRAFELEFT = \"strafeleft\"\nLUA_ACTIONS.STRAFERIGHT = \"straferight\"\nLUA_ACTIONS.LEFT = \"left\"\nLUA_ACTIONS.RIGHT = \"right\"\nLUA_ACTIONS.UP = \"up\"\nLUA_ACTIONS.DOWN = \"down\"\nLUA_ACTIONS.GROUNDALTITUDEUP = \"groundaltitudeup\"\nLUA_ACTIONS.GROUNDALTITUDEDOWN = \"groundaltitudedown\"\nLUA_ACTIONS.LALT = \"lalt\"\nLUA_ACTIONS.LSHIFT = \"lshift\"\nLUA_ACTIONS.GEAR = \"gear\"\nLUA_ACTIONS.LIGHT = \"light\"\nLUA_ACTIONS.BRAKE = \"brake\"\nLUA_ACTIONS.OPTION1 = \"option1\"\nLUA_ACTIONS.OPTION2 = \"option2\"\nLUA_ACTIONS.OPTION3 = \"option3\"\nLUA_ACTIONS.OPTION4 = \"option4\"\nLUA_ACTIONS.OPTION5 = \"option5\"\nLUA_ACTIONS.OPTION6 = \"option6\"\nLUA_ACTIONS.OPTION7 = \"option7\"\nLUA_ACTIONS.OPTION8 = \"option8\"\nLUA_ACTIONS.OPTION9 = \"option9\"\nLUA_ACTIONS.LEFTMOUSE = \"leftmouse\"\nLUA_ACTIONS.STOPENGINES = \"stopengines\"\nLUA_ACTIONS.SPEEDUP = \"speedup\"\nLUA_ACTIONS.SPEEDDOWN = \"speeddown\"\nLUA_ACTIONS.ANTIGRAVITY = \"antigravity\"\nLUA_ACTIONS.BOOSTER = \"booster\"; end)"},{"key":62,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/utils/duluac'] = (function (...) ---@class DuLuacUtils\nDuLuacUtils = {}\n\n---@param target DuLuacElement\n---@param event string\n---@param handlers table<string, function>\nfunction DuLuacUtils.addListener(target, event, handlers)\n    target:onEvent(event, DuLuacUtils.createHandler(handlers))\nend\n\nfunction DuLuacUtils.createHandler(handlers)\n    return function(_, key)\n        local handler = handlers[key]\n\n        if handler then\n            handler()\n        end\n    end\nend; end)"},{"key":63,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/state_manager/model/Service'] = (function (...) ---@class Service : DuLuacElement\n---@field hasHud boolean\nService = {}\nService.__index = Service\n\n---@return Service\nfunction Service.new()\n    local self = --[[---@type self]] {}\n\n    library.addEventHandlers(self)\n\n    ---@param state State\n    function self.start(state)\n        error('Service.start() method not implemented.')\n    end\n\n    self.hasHud = false\n\n    ---@return string\n    function self.drawHud()\n        error('Service.drawHud() method not implemented.')\n\n        return ''\n    end\n\n    return setmetatable(self, Service)\nend\n; end)"},{"key":64,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/concurrency/CoroutineManager'] = (function (...) ---@class CoroutinePermit\n---@field __index\n---@field workCounter number\nCoroutinePermit = {}\nCoroutinePermit.__index = CoroutinePermit\n\n---@param max number\n---@return CoroutinePermit\nfunction CoroutinePermit.new(max)\n    local self = --[[---@type self]] {}\n\n    self.workCounter = 0\n\n    ---@param permits number\n    ---@overload fun() : void\n    function self.acquire(permits)\n        permits = permits or 1\n\n        if self.workCounter < max then\n            self.workCounter = self.workCounter + 1\n        else\n            self.yield()\n        end\n    end\n\n    function self.yield()\n        _, max = coroutine.yield(self.workCounter)\n        self.workCounter = 0\n    end\n\n    return setmetatable(self, CoroutinePermit)\nend\n\n---@class CoroutineManager\n---@field __index\nCoroutineManager = {}\nCoroutineManager.__index = CoroutineManager\n\n---@param workPerTick number coroutine amount of work done per tick\n---@return CoroutineManager\nfunction CoroutineManager.new(workPerTick)\n    local self = --[[---@type self]] {}\n\n    ---@type thread\n    local masterCoroutine\n    ---@type table<Service, table<string, thread>>\n    local coroutines\n    ---@type number\n    self.activeCoroutines = 0\n\n    function self.poll()\n        if self.activeCoroutines > 0 and coroutine.status(masterCoroutine) == \"suspended\" then\n            local result, msg = coroutine.resume(masterCoroutine)\n            if not result then\n                error('master coroutine failed: ' .. msg)\n            end\n        end\n    end\n\n    ---@param service Service\n    ---@param name string\n    ---@param handler fun(permit: CoroutinePermit): void\n    ---@param repeated boolean\n    ---@overload fun(service: Service, name: string, handler: (fun(permit: CoroutinePermit): void)): void\n    function self.registerCoroutine(service, name, handler, repeated)\n        coroutines = coroutines or {}\n        self.activeCoroutines = self.activeCoroutines + 1\n\n        if not masterCoroutine then\n            masterCoroutine = coroutine.create(function()\n                local tickWorkQuota = workPerTick\n                local tickRoutinesCalled = 0\n                while self.activeCoroutines > 0 do\n                    local cycleActiveCoroutines = 0\n                    for _, routines in pairs(coroutines) do\n                        for routineName, routine in pairs(routines) do\n                            local permit = CoroutinePermit.new(tickWorkQuota)\n\n                            if coroutine.status(routine) == \"suspended\" then\n                                cycleActiveCoroutines = cycleActiveCoroutines + 1\n                                tickRoutinesCalled = tickRoutinesCalled + 1\n                                local result, returned = coroutine.resume(routine, permit, tickWorkQuota)\n                                if result then\n                                    tickWorkQuota = tickWorkQuota - returned\n                                else\n                                    error('coroutine failed \"' .. routineName .. '\": ' .. returned)\n                                end\n\n                                if tickWorkQuota == 0 or tickRoutinesCalled >= self.activeCoroutines then\n                                    coroutine.yield()\n                                    tickWorkQuota = workPerTick\n                                    tickRoutinesCalled = 0\n                                end\n                            end\n                        end\n                    end\n                    self.activeCoroutines = cycleActiveCoroutines\n                end\n            end)\n        end\n\n        local routine = coroutine.create(function(permit)\n            while repeated do\n                handler(permit)\n                permit.yield()\n            end\n            handler(permit)\n\n            return permit.workCounter\n        end)\n\n        local serviceCoroutines = coroutines[service] or {}\n        serviceCoroutines[name] = routine\n        coroutines[service] = serviceCoroutines\n    end\n\n    return setmetatable(self, CoroutineManager)\nend; end)"},{"key":65,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/state_manager/model/State'] = (function (...) ---@class State\nState = {}\nState.__index = State\n\n---@param services Service[]\n---@param unit ControlUnit\n---@param system System\n---@param workPerTick number coroutine amount of work done per tick\n---@param workTickInterval number coroutine interval between two ticks\n---@param onStarts (fun(state: State): void)[]\n---@overload fun(services: Service[], unit: ControlUnit, system: System, workPerTick: number, workInterval: number): State\n---@return State\nfunction State.new(services, unit, system, workPerTick, workTickInterval, onStarts)\n    local self = --[[---@type self]] {}\n\n    onStarts = onStarts or {}\n\n    ---@type fun[]\n    local handlersDeregister = {}\n    ---@type string[]\n    local timers = {}\n\n    local function drawHud()\n        ---@type string[]\n        local hud = {}\n        for _, service in ipairs(services) do\n            if service.hasHud then\n                table.insert(hud, service.drawHud())\n            end\n        end\n\n        if #hud > 0 then\n            local hudString = table.concat(hud)\n\n            if hudString ~= '' then\n                system.setScreen(hudString)\n            end\n        end\n    end\n\n    local coroutineManager = CoroutineManager.new(workPerTick)\n    function self.start()\n        for _, service in ipairs(services) do\n            service.start(self)\n        end\n\n        for _, onStart in ipairs(onStarts) do\n            onStart(self)\n        end\n\n        if coroutineManager.activeCoroutines > 0 then\n            self.registerTimer('State_masterCoroutine', workTickInterval, coroutineManager.poll)\n        end\n\n        system.showScreen(true)\n        self.registerHandler(system, SYSTEM_EVENTS.UPDATE, drawHud)\n    end\n\n    function self.stop()\n        for _, deregister in ipairs(handlersDeregister) do\n            deregister()\n        end\n        handlersDeregister = {}\n\n        for _, timer in ipairs(timers) do\n            unit.stopTimer(timer)\n        end\n        timers = {}\n\n        coroutineManager = CoroutineManager.new(workPerTick)\n    end\n\n    ---@param object DuLuacElement\n    ---@param event string\n    ---@param handler fun\n    function self.registerHandler(object, event, handler)\n        local handlerId = object:onEvent(event, handler)\n        table.insert(handlersDeregister, function()\n            object:clearEvent(event, handlerId)\n        end)\n    end\n\n    ---@param service Service\n    ---@param name string\n    ---@param handler fun(permit: CoroutinePermit): void\n    ---@param repeated boolean\n    ---@overload fun(service: Service, name: string, handler: (fun(permit: CoroutinePermit): void)): void\n    function self.registerCoroutine(service, name, handler, repeated)\n       coroutineManager.registerCoroutine(service, name, handler, repeated)\n    end\n\n    ---@param timer string\n    ---@param interval number\n    ---@param handler fun\n    function self.registerTimer(timer, interval, handler)\n        self.registerHandler(unit, 'onTimer', DuLuacUtils.createHandler({\n            [timer] = handler\n        }))\n\n        unit.setTimer(timer, interval)\n        table.insert(timers, timer)\n    end\n\n    return setmetatable(self, State)\nend\n; end)"},{"key":66,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/requires/service'] = (function (...) require('du-mu-data-collector:du_lib/utils/du_constants')\nrequire('du-mu-data-collector:du_lib/utils/duluac')\nrequire('du-mu-data-collector:du_lib/state_manager/model/Service')\nrequire('du-mu-data-collector:du_lib/concurrency/CoroutineManager')\nrequire('du-mu-data-collector:du_lib/state_manager/model/State'); end)"},{"key":67,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/state_manager/service/StateManager'] = (function (...) ---@class StateManager\nStateManager = {}\nStateManager.__index = StateManager\n\n---@param states State[]\n---@param system System\n---@return StateManager\nfunction StateManager.new(states, system)\n    local self = --[[---@type self]] {}\n\n    local currentStateIndex = 1\n    local currentState = states[1]\n\n    function self.start()\n        currentState.start()\n\n        DuLuacUtils.addListener(system, 'onActionStart', {\n            ['option1'] = self.nextState\n        })\n    end\n\n    function self.nextState()\n        currentState.stop()\n\n        if currentStateIndex + 1 > #states then\n            currentStateIndex = 1\n        else\n            currentStateIndex = currentStateIndex + 1\n        end\n\n        currentState = states[currentStateIndex]\n        currentState.start()\n    end\n\n    return setmetatable(self, StateManager)\nend\n; end)"},{"key":68,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/requires/stateManager'] = (function (...) require('du-mu-data-collector:du_lib/requires/service')\nrequire('du-mu-data-collector:du_lib/state_manager/service/StateManager'); end)"},{"key":69,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/data_hud/FullDataHudData'] = (function (...) ---@class FullDataHudData\n---@field groups string[]\n---@field headers string[]\n---@field rows string[][]\n---@field title string\nFullDataHudData = {}\nFullDataHudData.__index = FullDataHudData\n\n---@param groups string[] | nil\n---@param headers string[]\n---@param rows string[][]\n---@param title string\n---@overload fun(title: string, headers: string[], rows: string[][]) : FullDataHudData\n---@return FullDataHudData\nfunction FullDataHudData.new(title, headers, rows, groups)\n    local self = --[[---@type self]] { }\n\n    self.groups = --[[---@type string[] ]] groups\n    self.headers = headers\n    self.rows = rows\n    self.title = title\n\n    return setmetatable(self, FullDataHudData)\nend; end)"},{"key":70,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/utils/fn_duCurrentDateTime'] = (function (...) return function(utc)\n    local t = system.getUtcTime()\n    if not utc then t = t + system.getUtcOffset() end\n    local DSEC=24*60*60\n    local YSEC=365*DSEC\n    local LSEC=YSEC+DSEC\n    local FSEC=4*YSEC+DSEC\n    local BASE_DOW=4\n    local BASE_YEAR=1970\n    local _days={-1, 30, 58, 89, 119, 150, 180, 211, 242, 272, 303, 333, 364}\n    local _lpdays={}\n    for i=1,2  do _lpdays[i]=_days[i]   end\n    for i=3,13 do _lpdays[i]=_days[i]+1 end\n    local y,j,m,d,w,h,n,s\n    local mdays=_days\n    s=t\n    y=math.floor(s/FSEC)\n    s=s-y*FSEC\n    y=y*4+BASE_YEAR\n    if s>=YSEC then\n        y=y+1\n        s=s-YSEC\n        if s>=YSEC then\n            y=y+1\n            s=s-YSEC\n            if s>=LSEC then\n                y=y+1\n                s=s-LSEC\n            else\n                mdays=_lpdays\n            end\n        end\n    end\n    j=math.floor(s/DSEC)\n    s=s-j*DSEC\n    local m=1\n    while mdays[m]<j do m=m+1 end\n    m=m-1\n    local d=j-mdays[m]\n    w=(math.floor(t/DSEC)+BASE_DOW)%7\n    if w == 0 then w = 7 end\n    h=math.floor(s/3600)\n    s=s-h*3600\n    n=math.floor(s/60)\n    function round(a,b)if b then return utils.round(a/b)*b end;return a>=0 and math.floor(a+0.5)or math.ceil(a-0.5)end\n    s=round(s-n*60)\n    local weekDaysNames = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"}\n    local weekDaysShortNames = {\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"}\n    local monthNames = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"}\n    local monthShortNames = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}\n    return y,m,d,h,n,s,w,weekDaysNames[w],weekDaysShortNames[w],monthNames[m],monthShortNames[m],j+1\nend; end)"},{"key":71,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/data_hud/FullDataHud'] = (function (...) require('du-mu-data-collector:du_lib/requires/service')\nrequire('du-mu-data-collector:du_lib/data_hud/FullDataHudData')\nlocal duCurrentDateTime = require('du-mu-data-collector:du_lib/utils/fn_duCurrentDateTime')\n\n---@class FullDataHudEvents\nFULL_DATA_HUD_EVENTS = {}\n---handler: func(self, groupIndex)\nFULL_DATA_HUD_EVENTS.GROUP_SELECTED = 'onGroupSelected'\n---handler: func(self, detailIndex)\nFULL_DATA_HUD_EVENTS.DETAIL_SELECTED = 'onDetailSelected'\n---handler: func(self, groupIndex, detailIndex)\nFULL_DATA_HUD_EVENTS.DETAIL_ACTION_RIGHT = 'onDetailActionRight'\n---handler: func(self, groupIndex, detailIndex)\nFULL_DATA_HUD_EVENTS.DETAIL_ACTION_LEFT = 'onDetailActionLeft'\n---handler: func(self, groupIndex, detailIndex)\nFULL_DATA_HUD_EVENTS.DETAIL_ACTION_DOWN = 'onDetailActionDown'\n---handler: func(self, groupIndex, detailIndex)\nFULL_DATA_HUD_EVENTS.DETAIL_ACTION_UP = 'onDetailActionUp'\n---handler: func(self, groupIndex)\nFULL_DATA_HUD_EVENTS.GROUP_ACTION_RIGHT = 'onGroupActionRight'\n---handler: func(self, groupIndex)\nFULL_DATA_HUD_EVENTS.GROUP_ACTION_LEFT = 'onGroupActionLeft'\n\n---@class FullDataHud : Service\nFullDataHud = {}\nFullDataHud.__index = FullDataHud\n\nlocal function getHudHelpHtml(title)\n    local year, month, day, hour, minute, second, _, _, _, _, _, _ = duCurrentDateTime(nil)\n    local dateStr = string.format(\"%02d/%02d/%04d %02d:%02d:%02d\", day, month, year, hour, minute, second)\n    return table.concat({[[<div class=\"hud_help_commands hud_container\">\n    <table>\n        <tr><th>]], title, [[</th></tr>\n        <tr>\n            <th colspan=\"2\">\n                ]], dateStr, [[\n            </th>\n        </tr>\n        <tr>\n            <td>Show/Hide HUD</td>\n            <th style=\"text-align:right;\">Alt+2</th>\n        </tr>\n    </table>\n</div>]]})\nend\n\nlocal function getHudMainCss(contentFontSize, hideGroups)\n    local detailsContainerOffset = 20\n    if hideGroups then\n        detailsContainerOffset = 1\n    end\n    return table.concat({[[\n    <style>\n\t   * {\n\t\t  font-size: ]], tostring(contentFontSize), [[px;\n\t   }\n        .hud_container {\n            border: 2px solid orange;\n            border-radius:10px;\n            background-color: rgba(0,0,0,.75);\n            padding:10px;\n        }\n        .hud_help_commands {\n            position: absolute;\n            top: 1vh;\n            left: 1vw;\n            text-transform: uppercase;\n            font-weight: bold;\n        }\n        .hud_list_container {\n            position: absolute;\n            top: 17vh;\n            left: 1vw;\n            text-transform: uppercase;\n            font-weight: bold;\n        }\n        .hud_machines_container {\n            position: absolute;\n            top: 17vh;\n            left: ]], tostring(detailsContainerOffset), [[vw;\n        }\n        .elementType {\n            margin-top:10px;\n            border-radius:5px;\n        }\n        .elementType.selected {\n            border: 2px solid green;\n            background-color: rgba(0,200,0,.45);\n        }\n        tr.selected td, tr.selected th{\n            border: 2px solid green;\n            background-color: rgba(0,200,0,.1);\n        }\n        td, th {\n            border-bottom:1px solid white;\n            padding:5px;\n            text-align: center;\n        }\n        th {\n            font-weight: bold;\n        }\n        .text-success{color: #28a745;}\n        .text-danger{color:#dc3545;}\n        .text-warning{color:#ffc107;}\n        .text-info{color:#17a2b8;}\n        .text-primary{color:#007bff;}\n        .text-orangered{color:orangered;}\n        .bg-success{background-color: #28a745;}\n        .bg-danger{background-color:#dc3545;}\n        .bg-warning{background-color:#ffc107;}\n        .bg-info{background-color:#17a2b8;}\n        .bg-primary{background-color:#007bff;}\n    </style>\n]]})\nend\n\nlocal function getHudLoadingHtml()\n    return [[\n            <div class=\"hud_list_container hud_container\">\n            \t<table style=\"width:100%\">\n            \t\t<tr>\n            \t\t\t<th>LOADING...</th>\n            \t\t</tr>\n            \t</table>\n            </div>\n        ]]\nend\n\n---@return number\nlocal function minOnPage(page, pageSize)\n    return ((page - 1) * pageSize) + 1\nend\n\nlocal function maxOnPage(page, pageSize, lastItem)\n    return math.min(page * pageSize, lastItem)\nend\n\n---@param groups string[]\nlocal function renderGroupsHtml(groups, selectedGroupIndex, groupsByPage)\n    ---@type string[]\n    local groupsHtml = { [[<div class=\"hud_list_container hud_container\">\n                <div style=\"text-align:center;font-weight:bold;border-bottom:1px solid white;\">&#x2191; &nbsp;&nbsp; Ctrl+Arrow Up</div>\n            ]]}\n\n    local page = math.floor((selectedGroupIndex - 1) / groupsByPage) + 1\n    local minOnPage = minOnPage(page, groupsByPage)\n    local maxOnPage = maxOnPage(page, groupsByPage, #groups)\n\n    for i = minOnPage, maxOnPage do\n        local group = groups[i]\n        table.insert(groupsHtml, '<div class=\"elementType')\n        if i == selectedGroupIndex then\n            table.insert(groupsHtml, \" selected\")\n        end\n\n        table.insert(groupsHtml, [[\">\n                    <table style=\"width:100%;\">\n                        <tr>\n                            <th style=\"text-align:left;border-bottom:none;\">]])\n        table.insert(groupsHtml, group)\n        table.insert(groupsHtml, [[</th>\n                        </tr>\n                    </table>\n                </div>\n                ]])\n    end\n\n    table.insert(groupsHtml, [[<div style=\"margin-top:10px;text-align:center;font-weight:bold;border-top:1px solid white;\">&#x2193; &nbsp;&nbsp; Ctrl+Arrow Down</div></div>]])\n\n    return table.concat(groupsHtml)\nend\n\n---@param system System\n---@param contentFontSize number\n---@param elementsByPage number\n---@param groupsByPage number\n---@overload fun(system: System, contentFontSize: number, elementsByPage: number) : FullDataHud\n---@return FullDataHud\nfunction FullDataHud.new(system, contentFontSize, elementsByPage, groupsByPage)\n    local self = --[[---@type self]] Service.new()\n\n    local hudMainCss = getHudMainCss(contentFontSize, not groupsByPage)\n    local hudMinimalHtml = hudMainCss .. getHudHelpHtml('Hud Loading')\n    local hudLoadingHtml = hudMinimalHtml .. getHudLoadingHtml()\n\n    ---@type FullDataHudData\n    local data\n\n    local hudDisplayed = true\n    local selectedGroupIndex = 1\n    local selectedDetailIndex = 1\n    local page = 1\n    local maxPage = 1\n\n    local controlPressed = false\n    local altPressed = false\n\n    ---@param newData FullDataHudData\n    function self.updateData(newData)\n        data = newData\n        if data.rows then\n            maxPage = math.ceil(#data.rows / elementsByPage)\n        end\n    end\n\n    function self.setSelected(groupIndex, detailIndex)\n        selectedGroupIndex = groupIndex\n        selectedDetailIndex = detailIndex\n\n        page = math.floor((selectedDetailIndex - 1) / elementsByPage) + 1\n\n        self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_SELECTED, selectedGroupIndex)\n        self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n    end\n\n    local hudHtml = ''\n    local function updateHud()\n        local data = data\n\n        if data and data.title then\n            hudMinimalHtml = hudMainCss .. getHudHelpHtml(data.title)\n        end\n\n        if not hudDisplayed then\n            hudHtml = hudMinimalHtml\n            return\n        elseif not data then\n            hudHtml = hudLoadingHtml\n            return\n        end\n\n        local groupsHtml = ''\n        if groupsByPage and data.groups then\n            groupsHtml = renderGroupsHtml(data.groups, selectedGroupIndex, groupsByPage)\n        end\n\n        if not data.rows then\n            if data.groups then\n                hudHtml = hudMinimalHtml .. groupsHtml\n            else\n                hudHtml = hudLoadingHtml .. groupsHtml\n            end\n            return\n        end\n\n        local minOnPage = minOnPage(page, elementsByPage)\n        local maxOnPage = maxOnPage(page, elementsByPage, #data.rows)\n\n        ---@type (string | number)[]\n        local detailsHtml = {[[<div class=\"hud_machines_container hud_container\">\n                <div style=\"text-align:center;font-weight:bold;border-bottom:1px solid white;\">&#x2191; &nbsp;&nbsp; Arrow Up</div>\n                <table class=\"elements_table\" style=\"width:100%\">\n                    <tr>\n                        <th>&#x2190; &nbsp;&nbsp; Arrow Left</th>\n                        <th> Page ]], page, [[/]], maxPage, [[ (from ]], minOnPage, [[ to ]], maxOnPage, [[)</th>\n                        <th>Arrow Right &nbsp;&nbsp; &#x2192;</th>\n                    </tr>\n                </table>\n                <table class=\"elements_table\" style=\"width:100%;\">\n                    <tr>]]}\n\n        for _, header in ipairs(data.headers) do\n            table.insert(detailsHtml, '<th>')\n            table.insert(detailsHtml, header)\n            table.insert(detailsHtml, '</th>')\n        end\n        table.insert(detailsHtml, '</tr>')\n\n        for i = minOnPage, maxOnPage do\n            local row = data.rows[i]\n\n            table.insert(detailsHtml, [[<tr]])\n            if selectedDetailIndex == i then\n                table.insert(detailsHtml, [[ class=\"selected\"]])\n            end\n            table.insert(detailsHtml, '>')\n\n            for _, value in ipairs(row) do\n                table.insert(detailsHtml, [[<th>]])\n                table.insert(detailsHtml, value)\n                table.insert(detailsHtml, '</th>')\n            end\n            table.insert(detailsHtml, '</tr>')\n        end\n\n        table.insert(detailsHtml, [[</table>\n            <table class=\"elements_table\" style=\"width:100%\">\n                <tr>\n                    <th>&#x2190; &nbsp;&nbsp; Arrow Left</th>\n                    <th> Page ]])\n        table.insert(detailsHtml, page)\n        table.insert(detailsHtml, '/')\n        table.insert(detailsHtml, maxPage)\n        table.insert(detailsHtml, ' (from ')\n        table.insert(detailsHtml, minOnPage)\n        table.insert(detailsHtml, ' to ')\n        table.insert(detailsHtml, maxOnPage)\n        table.insert(detailsHtml, [[)</th>\n                    <th>Arrow Right &nbsp;&nbsp; &#x2192;</th>\n                </tr>\n            </table>\n            <div style=\"text-align:center;font-weight:bold;border-top:1px solid white;\">&#x2193; &nbsp;&nbsp; Arrow Down</div>\n            </div>]])\n\n        hudHtml = hudMinimalHtml .. groupsHtml .. table.concat(detailsHtml)\n    end\n\n    local function onStartBrake()\n        controlPressed = true\n    end\n\n    local function onStopBrake()\n        controlPressed = false\n    end\n\n    local function onStartAlt()\n        altPressed = true\n    end\n\n    local function onStopAlt()\n        altPressed = false\n    end\n\n    local function onStartDown()\n        if not hudDisplayed then\n            return\n        end\n        local data = data\n        if data.groups and controlPressed == true then\n            if selectedGroupIndex < #data.groups then\n                selectedGroupIndex = selectedGroupIndex + 1\n                selectedDetailIndex = 1\n                page = 1\n\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_SELECTED, selectedGroupIndex)\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n            end\n        elseif data.rows then\n            if altPressed then\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_ACTION_DOWN, selectedGroupIndex, selectedDetailIndex)\n            elseif selectedDetailIndex < maxOnPage(page, elementsByPage, #data.rows) then\n                selectedDetailIndex = selectedDetailIndex + 1\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n            elseif page < maxPage then\n                page = page + 1\n                selectedDetailIndex = minOnPage(page, elementsByPage)\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n            end\n        end\n    end\n\n    local function onStartUp()\n        if not hudDisplayed then\n            return\n        end\n        local data = data\n        if data.groups and controlPressed then\n            if selectedGroupIndex > 1 then\n                selectedGroupIndex = selectedGroupIndex - 1\n                selectedDetailIndex = 1\n                page = 1\n\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_SELECTED, selectedGroupIndex)\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n            end\n        elseif data.rows then\n            if altPressed then\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_ACTION_UP, selectedGroupIndex, selectedDetailIndex)\n            elseif selectedDetailIndex > minOnPage(page, elementsByPage) then\n                selectedDetailIndex = selectedDetailIndex - 1\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n            elseif page > 1 then\n                page = page - 1\n                selectedDetailIndex = maxOnPage(page, elementsByPage, #data.rows)\n                self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n            end\n        end\n    end\n\n    local function onStartStrafeLeft()\n        if not hudDisplayed then\n            return\n        end\n        if altPressed then\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_ACTION_LEFT, selectedGroupIndex, selectedDetailIndex)\n        elseif controlPressed then\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_ACTION_LEFT, selectedGroupIndex)\n        elseif page > 1 then\n            page = page - 1\n            selectedDetailIndex = minOnPage(page, elementsByPage)\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n        end\n    end\n\n    local function onStartStrafeRight()\n        if not hudDisplayed then\n            return\n        end\n        if altPressed then\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_ACTION_RIGHT, selectedGroupIndex, selectedDetailIndex)\n        elseif controlPressed then\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_ACTION_RIGHT, selectedGroupIndex)\n        elseif page < maxPage then\n            page = page + 1\n            selectedDetailIndex = minOnPage(page, elementsByPage)\n            self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n        end\n    end\n\n    local function onStartOption2()\n        hudDisplayed = not hudDisplayed\n    end\n\n    self.hasHud = true\n    ---@return string\n    function self.drawHud()\n        return hudHtml\n    end\n\n    ---@param state State\n    function self.start(state)\n        state.registerTimer('FullDataHud_updateUi', 0.1, updateHud)\n        state.registerHandler(system, SYSTEM_EVENTS.ACTION_STOP, DuLuacUtils.createHandler({\n            [LUA_ACTIONS.BRAKE] = onStopBrake,\n            [LUA_ACTIONS.LALT] = onStopAlt,\n        }))\n        state.registerHandler(system, SYSTEM_EVENTS.ACTION_START, DuLuacUtils.createHandler({\n            [LUA_ACTIONS.BRAKE] = onStartBrake,\n            [LUA_ACTIONS.LALT] = onStartAlt,\n            [LUA_ACTIONS.DOWN] = onStartDown,\n            [LUA_ACTIONS.UP] = onStartUp,\n            [LUA_ACTIONS.OPTION2] = onStartOption2,\n            [LUA_ACTIONS.STRAFELEFT] = onStartStrafeLeft,\n            [LUA_ACTIONS.STRAFERIGHT] = onStartStrafeRight,\n        }))\n\n        self:triggerEvent(FULL_DATA_HUD_EVENTS.GROUP_SELECTED, selectedGroupIndex)\n        self:triggerEvent(FULL_DATA_HUD_EVENTS.DETAIL_SELECTED, selectedDetailIndex)\n    end\n\n    return setmetatable(self, FullDataHud)\nend; end)"},{"key":72,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/requires/dataHud'] = (function (...) require('du-mu-data-collector:du_lib/requires/service')\nrequire('du-mu-data-collector:du_lib/data_hud/FullDataHudData')\nrequire('du-mu-data-collector:du_lib/data_hud/FullDataHud'); end)"},{"key":73,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/waypoints/WaypointManager'] = (function (...) require('du-mu-data-collector:du_lib/requires/service')\n\n---@class WaypointManager\nWaypointManager = {}\nWaypointManager.__index = WaypointManager\n\n---@param system System\n---@param db Databank exclusive db to use for waypoints\n---@return WaypointManager\nfunction WaypointManager.new(system, db)\n    local self = --[[---@type self]] {}\n\n    ---@return string[]\n    function self.listWaypoints()\n        return db.getKeyList()\n    end\n\n    ---@param name string\n    ---@param waypoint string\n    ---@overload fun(name: string)\n    function self.recordWaypoint(name, waypoint)\n        local finalWp = waypoint\n        if not finalWp then\n            finalWp = system.getWaypointFromPlayerPos()\n        end\n\n        db.setStringValue(name, finalWp)\n        system.print('Waypoint recorded \"' .. name .. '\": ' .. finalWp)\n    end\n\n    ---@param oldName string\n    ---@param newName string\n    function self.renameWaypoint(oldName, newName)\n        local finalWp = db.getStringValue(oldName)\n        db.clearValue(oldName)\n        db.setStringValue(newName, finalWp)\n\n        system.print('Waypoint renamed from \"' .. oldName .. ' to \"' .. newName .. '\"')\n    end\n\n    ---@param name string\n    function self.removeWaypoint(name)\n        db.clearValue(name)\n        system.print('Waypoint removed: ' .. name)\n    end\n\n    ---@param name string\n    function self.setWaypoint(name)\n        local waypoint = db.getStringValue(name)\n        if waypoint then\n            system.setWaypoint(waypoint, true)\n        end\n    end\n\n    return setmetatable(self, WaypointManager)\nend; end)"},{"key":74,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:MuDataCollector/service/BroadcasterPinger'] = (function (...) require('du-mu-data-collector:du_lib/requires/service')\n\n---@class BroadcasterPinger : Service\n---@field PING_TIMER\nBroadcasterPinger = {}\nBroadcasterPinger.__index = BroadcasterPinger\n\nBroadcasterPinger.PING_TIMER = 'broadcast_ping'\n\n---@param emitter Emitter\n---@param channel string\n---@param interval number\n---@return BroadcasterPinger\nfunction BroadcasterPinger.new(emitter, channel, interval)\n    local self = --[[---@type self]] Service.new()\n\n    local ping = function()\n        emitter.send(channel, 'ping')\n    end\n\n    ---@param state State\n    function self.start(state)\n        state.registerTimer(BroadcasterPinger.PING_TIMER, interval, ping)\n    end\n\n    return setmetatable(self, BroadcasterPinger)\nend; end)"},{"key":75,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/general/Serde'] = (function (...) local concat = table.concat\n\nlocal function internalSerialize(table, tC, t)\n    t[tC] = \"{\"\n    tC = tC + 1\n    if #table == 0 then\n        local hasValue = false\n        for key, value in pairs(table) do\n            hasValue = true\n            local keyType = type(key)\n            if keyType == \"string\" then\n                t[tC] = key .. \"=\"\n            elseif keyType == \"number\" then\n                t[tC] = \"[\" .. key .. \"]=\"\n            elseif keyType == \"boolean\" then\n                t[tC] = \"[\" .. tostring(key) .. \"]=\"\n            else\n                t[tC] = \"notsupported=\"\n            end\n            tC = tC + 1\n\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        if hasValue then\n            tC = tC - 1\n        end\n    else\n        for i = 1, #table do\n            local value = table[i]\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        tC = tC - 1\n    end\n    t[tC] = \"}\"\n    return tC\nend\n\n---@class Serde\nlocal Serde = {}\n\nfunction Serde.serialize(value)\n    ---@type string[]\n    local t = {}\n    local check = type(value)\n\n    if check == \"table\" then\n        internalSerialize(value, 1, t)\n    elseif check == \"string\" then\n        return '\"' .. value .. '\"'\n    elseif check == \"number\" then\n        return value\n    elseif check == \"boolean\" then\n        return tostring(value)\n    else\n        return '\"Not Supported\"'\n    end\n\n    return concat(t)\nend\n\n---@param s string\nfunction Serde.deserialize(s)\n    local fun, _ = --[[---@type fun, string]] load(\"return \" .. s)\n    return fun()\nend\n\nreturn Serde; end)"},{"key":76,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/requires/serde'] = (function (...) return --[[---@type Serde]] require('du-mu-data-collector:du_lib/general/Serde'); end)"},{"key":77,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:MuDataCollector/service/DataCollector'] = (function (...) require('du-mu-data-collector:du_lib/requires/service')\n\nlocal serde = require('du-mu-data-collector:du_lib/requires/serde')\n\n---@class DataCollector : Service\nDataCollector = {}\nDataCollector.__index = DataCollector\n\n---@param receiver Receiver\n---@param db Databank\n---@return DataCollector\nfunction DataCollector.new(receiver, db)\n    local self = --[[---@type self]] Service.new()\n\n    local receiveData = function(_, channel, message)\n        ---@type MiningConstructStateDTO\n        local muData = serde.deserialize(message)\n        local latest = message\n\n        if db.hasKey(channel) == 1 then\n            local previous = db.getStringValue(channel)\n            ---@type MiningConstructStateDTO\n            local previousData = serde.deserialize(previous)\n\n            if previousData and previousData.timestamp > muData.timestamp  then\n                return\n            end\n        end\n\n        db.setStringValue(channel, latest)\n    end\n\n    ---@param state State\n    function self.start(state)\n        state.registerHandler(receiver, 'onReceived', receiveData)\n    end\n\n    return setmetatable(self, DataCollector)\nend; end)"},{"key":78,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:MuDataCollector/service/MuDataHud'] = (function (...) require('du-mu-data-collector:du_lib/requires/service')\nrequire('du-mu-data-collector:du_lib/requires/dataHud')\nrequire('du-mu-data-collector:du_lib/waypoints/WaypointManager')\n\nlocal serde = require('du-mu-data-collector:du_lib/requires/serde')\n\n---@class MuDataHud : Service\nMuDataHud = {}\nMuDataHud.__index = MuDataHud\n\nlocal perHourDecay = 0.00625\n\nlocal function durationFormat(duration)\n    local timeLeft = duration\n    local days = math.floor(timeLeft / (24 * 3600))\n    timeLeft = timeLeft - days * 24 * 3600\n    local hours = math.floor(timeLeft / 3600)\n    timeLeft = timeLeft - hours * 3600\n    local minutes = math.floor(timeLeft / 60)\n    timeLeft = timeLeft - minutes * 60\n\n    return string.format('%.0fd %.0fh %.0fm', days, hours, minutes)\nend\n\nlocal HEADERS = { 'Name', 'Time', 'Calib', 'Next Calib', 'Cont %', 'MU #' }\n\n---@param minCalibration number\n---@return string[][]\nlocal function calculateData(system, db, minCalibration)\n    local keys = db.getKeyList()\n    table.sort(keys)\n    local data = {}\n\n    local currentTime = system.getUtcTime()\n    for _, key in pairs(keys) do\n        ---@type MiningConstructStateDTO\n        local muData = serde.deserialize(db.getStringValue(key))\n\n        local miningUnits = muData.miningUnits\n        table.sort(miningUnits, function(l, r)\n            return l.calibration < r.calibration\n        end)\n        local elapsed = math.max(0, currentTime - muData.timestamp)\n        local minCalUnit = miningUnits[1]\n        local decayHoursTotal = math.floor((minCalUnit.lastCalibration + elapsed) / 3600 - 72)\n        local decayHoursCollect = math.max(0, minCalUnit.lastCalibration / 3600 - 72)\n        local decay = math.max(0, decayHoursTotal - decayHoursCollect) * perHourDecay\n        local estimateMinCalibration = math.max(0, minCalUnit.calibration - decay)\n\n        local originalCalibration = minCalUnit.calibration + decayHoursCollect * perHourDecay\n        local totalTimeToMinCalibration = 72 + (originalCalibration - minCalibration) / perHourDecay\n        local nextCalibrationTime = math.max(0, totalTimeToMinCalibration * 3600 - minCalUnit.lastCalibration - elapsed)\n\n        local row = {\n            key,\n            durationFormat(elapsed),\n            string.format('%.2f%%', estimateMinCalibration * 100),\n            durationFormat(nextCalibrationTime),\n            string.format('%.2f%%', muData.container.fillLevel * 100),\n            #miningUnits\n        }\n\n        table.insert(data, row)\n    end\n\n    return data\nend\n\n---@param system System\n---@param muDb Databank\n---@param minCalibration number\n---@param hud FullDataHud\n---@param waypointManager WaypointManager\n---@return MuDataHud\nfunction MuDataHud.new(system, muDb, minCalibration, hud, waypointManager)\n    local self = --[[---@type self]] Service.new()\n\n    local data\n    local  function updateHud()\n        data = calculateData(system, muDb, minCalibration)\n        local huData = FullDataHudData.new('Collect Mode', HEADERS, data)\n        hud.updateData(huData)\n    end\n\n    local function recordWaypoint(_, _, index)\n        local name = data[index][1]\n        waypointManager.recordWaypoint(name)\n    end\n\n    local function setWaypoint(_, _, index)\n        local name = data[index][1]\n        waypointManager.setWaypoint(name)\n    end\n\n    ---@param state State\n    function self.start(state)\n        state.registerTimer('MuDataHud_updateHud', 0.5, updateHud)\n        state.registerHandler(hud, FULL_DATA_HUD_EVENTS.DETAIL_ACTION_LEFT, recordWaypoint)\n        state.registerHandler(hud, FULL_DATA_HUD_EVENTS.DETAIL_ACTION_RIGHT, setWaypoint)\n    end\n\n    return setmetatable(self, MuDataHud)\nend; end)"},{"key":79,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:MuDataCollector/service/DataSharing'] = (function (...) require('du-mu-data-collector:du_lib/requires/service')\nrequire('du-mu-data-collector:du_lib/requires/dataHud')\n\n---@class DataSharing : Service\nDataSharing = {}\nDataSharing.__index = DataSharing\n\nlocal SHARE_TIMER = 'data_share'\nlocal HEADERS = { 'Shared' }\n\n---@param db Databank\n---@param emitter Emitter\n---@param share_interval number\n---@param hud FullDataHud\n---@return DataSharing\nfunction DataSharing.new(db, emitter, share_interval, hud)\n    local self = --[[---@type self]] Service.new()\n\n    ---@type FullDataHudData\n    local hudData = FullDataHudData.new('Sync Mode', HEADERS, { })\n    hud.updateData(hudData)\n\n    local current_record = 1\n    local function share_data()\n        local numKeys = db.getNbKeys()\n\n        if numKeys == 0 then\n            return\n        end\n\n        if current_record > numKeys then\n            current_record = 1\n        end\n\n        local key = db.getKeyList()[current_record]\n        local data = db.getStringValue(key)\n        emitter.send(key, data)\n\n        table.insert(hudData.rows, { key })\n\n        current_record = current_record + 1\n    end\n\n    ---@param state State\n    function self.start(state)\n        hudData.rows = {}\n\n        state.registerTimer(SHARE_TIMER, share_interval, share_data)\n    end\n\n    return setmetatable(self, DataSharing)\nend; end)"},{"key":80,"filter":{"slotKey":-4,"signature":"onActionStart(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onActionStart\",action)"},{"key":81,"filter":{"slotKey":-4,"signature":"onActionLoop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onActionLoop\",action)"},{"key":82,"filter":{"slotKey":-4,"signature":"onActionStop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onActionStop\",action)"},{"key":83,"filter":{"slotKey":-4,"signature":"onUpdate()","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onUpdate\")"},{"key":84,"filter":{"slotKey":-4,"signature":"onFlush()","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onFlush\")"},{"key":85,"filter":{"slotKey":-4,"signature":"onInputText(text)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onInputText\",text)"},{"key":86,"filter":{"slotKey":-4,"signature":"onCameraChanged(mode)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onCameraChanged\",mode)"},{"key":87,"filter":{"slotKey":-3,"signature":"onParentChanged(oldId,newId)","args":[{"variable":"*"},{"variable":"*"}]},"code":"player:triggerEvent(\"onParentChanged\",oldId,newId)"},{"key":88,"filter":{"slotKey":-2,"signature":"onDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onDocked\",id)"},{"key":89,"filter":{"slotKey":-2,"signature":"onUndocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onUndocked\",id)"},{"key":90,"filter":{"slotKey":-2,"signature":"onPlayerBoarded(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onPlayerBoarded\",id)"},{"key":91,"filter":{"slotKey":-2,"signature":"onVRStationEntered(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onVRStationEntered\",id)"},{"key":92,"filter":{"slotKey":-2,"signature":"onConstructDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onConstructDocked\",id)"},{"key":93,"filter":{"slotKey":-2,"signature":"onPvPTimer(active)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onPvPTimer\",active)"},{"key":94,"filter":{"slotKey":-1,"signature":"onStart()","args":[{"variable":"*"}]},"code":"unit:triggerEvent(\"onStart\")"},{"key":95,"filter":{"slotKey":-1,"signature":"onStop()","args":[{"variable":"*"}]},"code":"unit:triggerEvent(\"onStop\")"},{"key":96,"filter":{"slotKey":-1,"signature":"onTimer(timerId)","args":[{"variable":"*"}]},"code":"unit:triggerEvent(\"onTimer\",timerId)"},{"key":97,"filter":{"slotKey":1,"signature":"onReceived(channel,message)","args":[{"variable":"*"},{"variable":"*"}]},"code":"receiver:triggerEvent(\"onReceived\",channel,message)"},{"key":98,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"-- Setup improved event handlers\nif not __EVENTS then\nlibrary.addEventHandlers(library)\nlibrary.addEventHandlers(system)\nlibrary.addEventHandlers(player)\nlibrary.addEventHandlers(construct)\nlibrary.addEventHandlers(unit)\nlibrary.addEventHandlers(receiver)\n__EVENTS=true\nend"},{"key":99,"filter":{"slotKey":-1,"signature":"onStart()","args":[{"variable":"*"}]},"code":"require('du-mu-data-collector:du_lib/requires/stateManager')\nrequire('du-mu-data-collector:du_lib/requires/dataHud')\nrequire('du-mu-data-collector:du_lib/waypoints/WaypointManager')\nrequire('du-mu-data-collector:MuDataCollector/service/BroadcasterPinger')\nrequire('du-mu-data-collector:MuDataCollector/service/DataCollector')\nrequire('du-mu-data-collector:MuDataCollector/service/MuDataHud')\nrequire('du-mu-data-collector:MuDataCollector/service/DataSharing')\n\n\nlocal broadcastChannel='collector_ping' --export: Channel to ping MuDataBroadcasters on\n\n\nlocal broadcastInterval=1 --export: How often the collector should ping the MU programming boards\n\n\nlocal shareInterval=0.5 --export: Interval between sharing each data point\n\n\nlocal minCalibration=0.35 --export: Calibration to use for the Next Calibration field in the HUD\n\n\nlocal contentFontSize=15 --export: Hud content size\n\n\nlocal elementsByPage=10 --export: How many elements are show per page of the HUD\n\n\n\nlocal workPerTick=1000 --export: coroutine amount of work done per tick\n\n\nlocal workTickInterval=0.1 --export: coroutine interval between ticks\n\n\n\nemitter = emitter\nreceiver = receiver\nmuDb = muDb\nwaypointDb = waypointDb\n\n\n--Collect Data State\nlocal hud = FullDataHud.new(system, contentFontSize, elementsByPage)\nlocal waypointManager = WaypointManager.new(system, waypointDb)\n---@type Service[]\nlocal collectServices = {\n    BroadcasterPinger.new(emitter, broadcastChannel, broadcastInterval),\n    DataCollector.new(receiver, muDb),\n    MuDataHud.new(system, muDb, minCalibration, hud, waypointManager),\n    hud\n}\nlocal collectState = State.new(collectServices, unit, system, workPerTick, workTickInterval)\n\n\n--Sync/Share State\nlocal syncServices = {\n    DataSharing.new(muDb, emitter, shareInterval, hud),\n    hud\n}\nlocal syncState = State.new(syncServices, unit, system, workPerTick, workTickInterval)\n\n\nStateManager.new({ collectState, syncState }, system).start()"}],"methods":[],"events":[]}