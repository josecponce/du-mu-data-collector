{"slots":{"0":{"name":"container","type":{"methods":[],"events":[]},"class":"ItemContainer"},"1":{"name":"emitter","type":{"methods":[],"events":[]}},"2":{"name":"receiver","type":{"methods":[],"events":[]}},"3":{"name":"miningUnit1","type":{"methods":[],"events":[]},"class":"MiningUnit"},"4":{"name":"miningUnit2","type":{"methods":[],"events":[]},"class":"MiningUnit"},"5":{"name":"miningUnit3","type":{"methods":[],"events":[]},"class":"MiningUnit"},"6":{"name":"miningUnit4","type":{"methods":[],"events":[]},"class":"MiningUnit"},"7":{"name":"miningUnit5","type":{"methods":[],"events":[]},"class":"MiningUnit"},"8":{"name":"miningUnit6","type":{"methods":[],"events":[]},"class":"MiningUnit"},"9":{"name":"miningUnit7","type":{"methods":[],"events":[]},"class":"MiningUnit"},"10":{"name":"slot10","type":{"methods":[],"events":[]}},"11":{"name":"slot11","type":{"methods":[],"events":[]}},"12":{"name":"slot12","type":{"methods":[],"events":[]}},"13":{"name":"slot13","type":{"methods":[],"events":[]}},"14":{"name":"slot14","type":{"methods":[],"events":[]}},"15":{"name":"slot15","type":{"methods":[],"events":[]}},"16":{"name":"slot16","type":{"methods":[],"events":[]}},"17":{"name":"slot17","type":{"methods":[],"events":[]}},"18":{"name":"slot18","type":{"methods":[],"events":[]}},"19":{"name":"slot19","type":{"methods":[],"events":[]}},"20":{"name":"slot20","type":{"methods":[],"events":[]}},"-5":{"name":"library","type":{"methods":[],"events":[]}},"-4":{"name":"system","type":{"methods":[],"events":[]}},"-3":{"name":"player","type":{"methods":[],"events":[]}},"-2":{"name":"construct","type":{"methods":[],"events":[]}},"-1":{"name":"unit","type":{"methods":[],"events":[]}}},"handlers":[{"key":0,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"function library.addEventHandlers(a)if not a or a.onEvent and a.triggerEvent then return false end;if'table'~=type(a)then error('You can only add event handlers to table objects!')end;local b=0;local c={}a.onEvent=function(self,d,e,f)if'function'~=type(e)then error('Event handler must be a function!')end;f=f or self;if'table'~=type(f)then error('The value of self must be a table!')end;if not c[d]then c[d]={}end;b=b+1;c[d][b]={e,f}return b end;a.clearEvent=function(self,d,g)if c[d]and c[d][g]then c[d][g]=nil end end;a.triggerEvent=function(self,d,...)for h,e in pairs(c[d]or{})do e[1](e[2],...)end end;return true end\nlocal a=DULibrary;function a.getLinks(b,c)local d={}if not b then b={}end;local e=0;for f,g in pairs(unit)do if'table'==type(g)and'function'==type(g.getClass)then local h=true;for i,j in pairs(b)do if not('function'==type(g[i])and j==g[i]():sub(1,#j))then h=false end end;if h then e=e+1;if c then f=e end;d[f]=g end end end;return d end;function a.getLinksByClass(k,c)return a.getLinks({getClass=k},c)end;function a.getLinkByClass(k)return a.getLinksByClass(k,true)[1]end;function a.getCoreUnit()return a.getLinkByClass('CoreUnit')end;function a.getLinkByName(l)local m=a.getCoreUnit()if not m then error('getLinkByName requires a linked CoreUnit to work')end;local d=a.getLinks()for n,g in pairs(d)do if l==m.getElementNameById(g.getLocalId())then return g end end end\n"},{"key":1,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:MuDataBroadcaster/model/MiningConstructStateDTO'] = (function (...) ---@class MiningConstructStateDTO\nMiningConstructStateDTO = {}\nMiningConstructStateDTO.__index = MiningConstructStateDTO\n\n---@param container Container\n---@param units table<number, MiningUnit>\n---@return MiningConstructStateDTO\nfunction MiningConstructStateDTO.new(container, units)\n    local self = --[[---@type self]] {}\n\n    self.timestamp = system.getUtcTime()\n    self.container = ContainerStateDTO.new(container)\n    ---@type MiningUnitStateDTO[]\n    self.miningUnits = {}\n    for _, unit in pairs(units) do\n        table.insert(self.miningUnits, MiningUnitStateDTO.new(unit))\n    end\n\n    return self\nend\n\n---@class MiningUnitStateDTO\nMiningUnitStateDTO = {}\nMiningUnitStateDTO.__index = MiningUnitStateDTO\n\n---@param unit MiningUnit\n---@return MiningUnitStateDTO\nfunction MiningUnitStateDTO.new(unit)\n    local self = --[[---@type self]] {}\n\n    self.calibration = unit.getCalibrationRate()\n    self.lastCalibration = unit.getLastExtractionTime()\n    self.state = unit.getState()\n\n    return self\nend\n\n---@class ContainerStateDTO\nContainerStateDTO = {}\nContainerStateDTO.__index = ContainerStateDTO\n\n---@param container Container\n---@return ContainerStateDTO\nfunction ContainerStateDTO.new(container)\n    local self = --[[---@type self]] {}\n\n    self.fillLevel = container.getItemsVolume() / container.getMaxVolume()\n\n    return self\nend; end)"},{"key":2,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/general/Serde'] = (function (...) local concat = table.concat\n\nlocal function internalSerialize(table, tC, t)\n    t[tC] = \"{\"\n    tC = tC + 1\n    if #table == 0 then\n        local hasValue = false\n        for key, value in pairs(table) do\n            hasValue = true\n            local keyType = type(key)\n            if keyType == \"string\" then\n                t[tC] = key .. \"=\"\n            elseif keyType == \"number\" then\n                t[tC] = \"[\" .. key .. \"]=\"\n            elseif keyType == \"boolean\" then\n                t[tC] = \"[\" .. tostring(key) .. \"]=\"\n            else\n                t[tC] = \"notsupported=\"\n            end\n            tC = tC + 1\n\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        if hasValue then\n            tC = tC - 1\n        end\n    else\n        for i = 1, #table do\n            local value = table[i]\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        tC = tC - 1\n    end\n    t[tC] = \"}\"\n    return tC\nend\n\n---@class Serde\nlocal Serde = {}\n\nfunction Serde.serialize(value)\n    ---@type string[]\n    local t = {}\n    local check = type(value)\n\n    if check == \"table\" then\n        internalSerialize(value, 1, t)\n    elseif check == \"string\" then\n        return '\"' .. value .. '\"'\n    elseif check == \"number\" then\n        return value\n    elseif check == \"boolean\" then\n        return tostring(value)\n    else\n        return '\"Not Supported\"'\n    end\n\n    return concat(t)\nend\n\n---@param s string\nfunction Serde.deserialize(s)\n    local fun, _ = --[[---@type fun, string]] load(\"return \" .. s)\n    return fun()\nend\n\nreturn Serde; end)"},{"key":3,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"package.preload['du-mu-data-collector:du_lib/requires/serde'] = (function (...) return --[[---@type Serde]] require('du-mu-data-collector:du_lib/general/Serde'); end)"},{"key":4,"filter":{"slotKey":-4,"signature":"onActionStart(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onActionStart\",action)"},{"key":5,"filter":{"slotKey":-4,"signature":"onActionLoop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onActionLoop\",action)"},{"key":6,"filter":{"slotKey":-4,"signature":"onActionStop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onActionStop\",action)"},{"key":7,"filter":{"slotKey":-4,"signature":"onUpdate()","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onUpdate\")"},{"key":8,"filter":{"slotKey":-4,"signature":"onFlush()","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onFlush\")"},{"key":9,"filter":{"slotKey":-4,"signature":"onInputText(text)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onInputText\",text)"},{"key":10,"filter":{"slotKey":-4,"signature":"onCameraChanged(mode)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onCameraChanged\",mode)"},{"key":11,"filter":{"slotKey":-3,"signature":"onParentChanged(oldId,newId)","args":[{"variable":"*"},{"variable":"*"}]},"code":"player:triggerEvent(\"onParentChanged\",oldId,newId)"},{"key":12,"filter":{"slotKey":-2,"signature":"onDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onDocked\",id)"},{"key":13,"filter":{"slotKey":-2,"signature":"onUndocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onUndocked\",id)"},{"key":14,"filter":{"slotKey":-2,"signature":"onPlayerBoarded(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onPlayerBoarded\",id)"},{"key":15,"filter":{"slotKey":-2,"signature":"onVRStationEntered(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onVRStationEntered\",id)"},{"key":16,"filter":{"slotKey":-2,"signature":"onConstructDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onConstructDocked\",id)"},{"key":17,"filter":{"slotKey":-2,"signature":"onPvPTimer(active)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onPvPTimer\",active)"},{"key":18,"filter":{"slotKey":-1,"signature":"onStart()","args":[{"variable":"*"}]},"code":"unit:triggerEvent(\"onStart\")"},{"key":19,"filter":{"slotKey":-1,"signature":"onStop()","args":[{"variable":"*"}]},"code":"unit:triggerEvent(\"onStop\")"},{"key":20,"filter":{"slotKey":-1,"signature":"onTimer(timerId)","args":[{"variable":"*"}]},"code":"unit:triggerEvent(\"onTimer\",timerId)"},{"key":21,"filter":{"slotKey":0,"signature":"onContentUpdate()","args":[{"variable":"*"}]},"code":"container:triggerEvent(\"onContentUpdate\")"},{"key":22,"filter":{"slotKey":2,"signature":"onReceived(channel,message)","args":[{"variable":"*"},{"variable":"*"}]},"code":"receiver:triggerEvent(\"onReceived\",channel,message)"},{"key":23,"filter":{"slotKey":3,"signature":"onCalibrated(oreId,rate,amount)","args":[{"variable":"*"},{"variable":"*"},{"variable":"*"}]},"code":"miningUnit1:triggerEvent(\"onCalibrated\",oreId,rate,amount)"},{"key":24,"filter":{"slotKey":3,"signature":"onCompleted(oreId,amount)","args":[{"variable":"*"},{"variable":"*"}]},"code":"miningUnit1:triggerEvent(\"onCompleted\",oreId,amount)"},{"key":25,"filter":{"slotKey":3,"signature":"onStateChanged(status)","args":[{"variable":"*"}]},"code":"miningUnit1:triggerEvent(\"onStateChanged\",status)"},{"key":26,"filter":{"slotKey":3,"signature":"onStarted(id)","args":[{"variable":"*"}]},"code":"miningUnit1:triggerEvent(\"onStarted\",id)"},{"key":27,"filter":{"slotKey":3,"signature":"onStopped()","args":[{"variable":"*"}]},"code":"miningUnit1:triggerEvent(\"onStopped\")"},{"key":28,"filter":{"slotKey":4,"signature":"onCalibrated(oreId,rate,amount)","args":[{"variable":"*"},{"variable":"*"},{"variable":"*"}]},"code":"miningUnit2:triggerEvent(\"onCalibrated\",oreId,rate,amount)"},{"key":29,"filter":{"slotKey":4,"signature":"onCompleted(oreId,amount)","args":[{"variable":"*"},{"variable":"*"}]},"code":"miningUnit2:triggerEvent(\"onCompleted\",oreId,amount)"},{"key":30,"filter":{"slotKey":4,"signature":"onStateChanged(status)","args":[{"variable":"*"}]},"code":"miningUnit2:triggerEvent(\"onStateChanged\",status)"},{"key":31,"filter":{"slotKey":4,"signature":"onStarted(id)","args":[{"variable":"*"}]},"code":"miningUnit2:triggerEvent(\"onStarted\",id)"},{"key":32,"filter":{"slotKey":4,"signature":"onStopped()","args":[{"variable":"*"}]},"code":"miningUnit2:triggerEvent(\"onStopped\")"},{"key":33,"filter":{"slotKey":5,"signature":"onCalibrated(oreId,rate,amount)","args":[{"variable":"*"},{"variable":"*"},{"variable":"*"}]},"code":"miningUnit3:triggerEvent(\"onCalibrated\",oreId,rate,amount)"},{"key":34,"filter":{"slotKey":5,"signature":"onCompleted(oreId,amount)","args":[{"variable":"*"},{"variable":"*"}]},"code":"miningUnit3:triggerEvent(\"onCompleted\",oreId,amount)"},{"key":35,"filter":{"slotKey":5,"signature":"onStateChanged(status)","args":[{"variable":"*"}]},"code":"miningUnit3:triggerEvent(\"onStateChanged\",status)"},{"key":36,"filter":{"slotKey":5,"signature":"onStarted(id)","args":[{"variable":"*"}]},"code":"miningUnit3:triggerEvent(\"onStarted\",id)"},{"key":37,"filter":{"slotKey":5,"signature":"onStopped()","args":[{"variable":"*"}]},"code":"miningUnit3:triggerEvent(\"onStopped\")"},{"key":38,"filter":{"slotKey":6,"signature":"onCalibrated(oreId,rate,amount)","args":[{"variable":"*"},{"variable":"*"},{"variable":"*"}]},"code":"miningUnit4:triggerEvent(\"onCalibrated\",oreId,rate,amount)"},{"key":39,"filter":{"slotKey":6,"signature":"onCompleted(oreId,amount)","args":[{"variable":"*"},{"variable":"*"}]},"code":"miningUnit4:triggerEvent(\"onCompleted\",oreId,amount)"},{"key":40,"filter":{"slotKey":6,"signature":"onStateChanged(status)","args":[{"variable":"*"}]},"code":"miningUnit4:triggerEvent(\"onStateChanged\",status)"},{"key":41,"filter":{"slotKey":6,"signature":"onStarted(id)","args":[{"variable":"*"}]},"code":"miningUnit4:triggerEvent(\"onStarted\",id)"},{"key":42,"filter":{"slotKey":6,"signature":"onStopped()","args":[{"variable":"*"}]},"code":"miningUnit4:triggerEvent(\"onStopped\")"},{"key":43,"filter":{"slotKey":7,"signature":"onCalibrated(oreId,rate,amount)","args":[{"variable":"*"},{"variable":"*"},{"variable":"*"}]},"code":"miningUnit5:triggerEvent(\"onCalibrated\",oreId,rate,amount)"},{"key":44,"filter":{"slotKey":7,"signature":"onCompleted(oreId,amount)","args":[{"variable":"*"},{"variable":"*"}]},"code":"miningUnit5:triggerEvent(\"onCompleted\",oreId,amount)"},{"key":45,"filter":{"slotKey":7,"signature":"onStateChanged(status)","args":[{"variable":"*"}]},"code":"miningUnit5:triggerEvent(\"onStateChanged\",status)"},{"key":46,"filter":{"slotKey":7,"signature":"onStarted(id)","args":[{"variable":"*"}]},"code":"miningUnit5:triggerEvent(\"onStarted\",id)"},{"key":47,"filter":{"slotKey":7,"signature":"onStopped()","args":[{"variable":"*"}]},"code":"miningUnit5:triggerEvent(\"onStopped\")"},{"key":48,"filter":{"slotKey":8,"signature":"onCalibrated(oreId,rate,amount)","args":[{"variable":"*"},{"variable":"*"},{"variable":"*"}]},"code":"miningUnit6:triggerEvent(\"onCalibrated\",oreId,rate,amount)"},{"key":49,"filter":{"slotKey":8,"signature":"onCompleted(oreId,amount)","args":[{"variable":"*"},{"variable":"*"}]},"code":"miningUnit6:triggerEvent(\"onCompleted\",oreId,amount)"},{"key":50,"filter":{"slotKey":8,"signature":"onStateChanged(status)","args":[{"variable":"*"}]},"code":"miningUnit6:triggerEvent(\"onStateChanged\",status)"},{"key":51,"filter":{"slotKey":8,"signature":"onStarted(id)","args":[{"variable":"*"}]},"code":"miningUnit6:triggerEvent(\"onStarted\",id)"},{"key":52,"filter":{"slotKey":8,"signature":"onStopped()","args":[{"variable":"*"}]},"code":"miningUnit6:triggerEvent(\"onStopped\")"},{"key":53,"filter":{"slotKey":9,"signature":"onCalibrated(oreId,rate,amount)","args":[{"variable":"*"},{"variable":"*"},{"variable":"*"}]},"code":"miningUnit7:triggerEvent(\"onCalibrated\",oreId,rate,amount)"},{"key":54,"filter":{"slotKey":9,"signature":"onCompleted(oreId,amount)","args":[{"variable":"*"},{"variable":"*"}]},"code":"miningUnit7:triggerEvent(\"onCompleted\",oreId,amount)"},{"key":55,"filter":{"slotKey":9,"signature":"onStateChanged(status)","args":[{"variable":"*"}]},"code":"miningUnit7:triggerEvent(\"onStateChanged\",status)"},{"key":56,"filter":{"slotKey":9,"signature":"onStarted(id)","args":[{"variable":"*"}]},"code":"miningUnit7:triggerEvent(\"onStarted\",id)"},{"key":57,"filter":{"slotKey":9,"signature":"onStopped()","args":[{"variable":"*"}]},"code":"miningUnit7:triggerEvent(\"onStopped\")"},{"key":58,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"-- Setup improved event handlers\nif not __EVENTS then\nlibrary.addEventHandlers(library)\nlibrary.addEventHandlers(system)\nlibrary.addEventHandlers(player)\nlibrary.addEventHandlers(construct)\nlibrary.addEventHandlers(unit)\nlibrary.addEventHandlers(container)\nlibrary.addEventHandlers(receiver)\nlibrary.addEventHandlers(miningUnit1)\nlibrary.addEventHandlers(miningUnit2)\nlibrary.addEventHandlers(miningUnit3)\nlibrary.addEventHandlers(miningUnit4)\nlibrary.addEventHandlers(miningUnit5)\nlibrary.addEventHandlers(miningUnit6)\nlibrary.addEventHandlers(miningUnit7)\n__EVENTS=true\nend"},{"key":59,"filter":{"slotKey":-1,"signature":"onStart()","args":[{"variable":"*"}]},"code":"unit.hideWidget()\n\nrequire('du-mu-data-collector:MuDataBroadcaster/model/MiningConstructStateDTO')\n\nlocal serde = require('du-mu-data-collector:du_lib/requires/serde')\n\n\nlocal broadcastChannel='mu' --export\n\n\nlocal pingChannel='collector_ping' --export: Channel Collector pings on\n\n\nminingUnit1, miningUnit2, miningUnit3, miningUnit4, miningUnit5, miningUnit6, miningUnit7 = miningUnit1, miningUnit2, miningUnit3, miningUnit4, miningUnit5, miningUnit6, miningUnit7\nemitter = emitter\nreceiver = receiver\ncontainer = container\n---@type table<number, MiningUnit>\nminingUnits = { miningUnit1, miningUnit2, miningUnit3, miningUnit4, miningUnit5, miningUnit6, miningUnit7 }\n\nreceiver.setChannelList({ pingChannel })\nlocal state = MiningConstructStateDTO.new(container, miningUnits)\nlocal stateString = serde.serialize(state)\nemitter.send(broadcastChannel, stateString)\n\nunit.exit()"}],"methods":[],"events":[]}